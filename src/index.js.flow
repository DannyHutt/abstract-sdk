// @flow

export type OrganizationDescriptor = {|
  organizationId: string
|};

export type ProjectDescriptor = {|
  projectId: string
|};

export type ObjectDescriptor = {|
  projectId: string,
  sha?: string, // undefined is "latest"

  // Require branchId across all objects
  branchId: $PropertyType<BranchDescriptor, "branchId"> // eslint-disable-line no-use-before-define
|};

export type CommitDescriptor = {|
  ...ObjectDescriptor,
  sha: $NonMaybeType<$PropertyType<ObjectDescriptor, "sha">> // Commit is read by it's sha
|};

export type BranchDescriptor = {|
  ...ObjectDescriptor,
  branchId: string | "master"
|};

export type CollectionDescriptor = {|
  ...ObjectDescriptor,
  collectionId: string
|};

export type FileDescriptor = {|
  ...ObjectDescriptor,
  fileId: string
|};

export type PageDescriptor = {|
  ...ObjectDescriptor,
  fileId: string,
  pageId: string
|};

export type LayerDescriptor = {|
  ...ObjectDescriptor,
  sha: $NonMaybeType<$PropertyType<ObjectDescriptor, "sha">>, // Layer requires sha
  fileId: string,
  pageId: string,
  layerId: string
|};

export type Cursor<T> = Promise<{
  value: T,
  done: boolean
}> & {
  currentPage: number // possibly under pageInfo?
  // next(): <T>Cursor,
  // [Symbol.asyncIterator](): string
};

export type Comment = {
  body: string,
  annotation?: {
    x: number,
    y: number,
    width: number,
    height: number
  }
};

export interface AbstractInterface {
  abstractToken: string;

  organizations?: {
    list: () => Promise<*>
  };

  projects?: {
    list: (
      organizationDescriptor?: OrganizationDescriptor,
      options: { filter?: "active" | "archived" }
    ) => Promise<*>,
    info: (projectDescriptor: ProjectDescriptor) => Promise<*>
  };

  collections: {
    list: (
      ProjectDescriptor | BranchDescriptor,
      options?: Object
    ) => Promise<*>,
    info: (CollectionDescriptor, options?: Object) => Promise<*>
  };

  comments?: {
    create: (BranchDescriptor | LayerDescriptor, comment: Comment) => Promise<*>
  };

  commits: {
    list: (BranchDescriptor | LayerDescriptor) => Promise<*>,
    info: (FileDescriptor | LayerDescriptor | CommitDescriptor) => Promise<*>
  };

  branches?: {
    list: (
      ProjectDescriptor,
      options: { filter?: "active" | "archived" | "mine" }
    ) => Promise<*>,
    info: BranchDescriptor => Promise<*>
  };

  changesets: {
    info: CommitDescriptor => Promise<*>
  };

  files: {
    list: BranchDescriptor => Promise<*>,
    info: FileDescriptor => Promise<*>
  };

  pages: {
    list: FileDescriptor => Promise<*>,
    info: PageDescriptor => Promise<*>
  };

  layers: {
    list: FileDescriptor => Promise<*>,
    info: LayerDescriptor => Promise<*>
  };

  previews?: {
    blob: LayerDescriptor => Promise<Blob>,
    url: LayerDescriptor => string
  };

  data: {
    info: LayerDescriptor => Promise<*>
  };
}
